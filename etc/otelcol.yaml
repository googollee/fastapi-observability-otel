receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

  fluentforward:
    endpoint: 0.0.0.0:8006

  prometheus:
    config:
      scrape_configs:
        - job_name: "prometheus"
          static_configs:
            - targets: ["prometheus:9090"]
        - job_name: 'app-a'
          scrape_interval: 5s
          static_configs:
            - targets: ['app-a:8000']
        - job_name: 'app-b'
          scrape_interval: 5s
          static_configs:
            - targets: ['app-b:8000']
        - job_name: 'app-c'
          scrape_interval: 5s
          static_configs:
            - targets: ['app-c:8000']

processors:
  resource/router:
    attributes:
      - key: host.name
        value: router
        action: upsert
  resource/nas:
    attributes:
      - key: host.name
        value: nas
        action: upsert
  resourcedetection:
    detectors: [env, docker]
    timeout: 2s
    override: false
  attributes/loki:
    actions:
      - action: insert
        key: loki.attribute.labels
        value: container_name
      - action: insert
        key: loki.format
        value: raw
  batch:
    timeout: 5s
    send_batch_size: 100000

exporters:
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    default_labels_enabled:
      exporter: false
      job: true

  prometheus:
    endpoint: "0.0.0.0:8000"

  otlp:
    endpoint: tempo:4317
    tls:
      insecure: true

  file:
    path: /output/output.log

service:
  # telemetry:
    # logs:
      # level: debug
  pipelines:
    traces:
      receivers: [otlp]
      processors: [resourcedetection, batch]
      exporters: [otlp, file]
    metrics:
      receivers: [prometheus]
      processors: [resourcedetection, batch]
      exporters: [prometheus, file]
    logs:
      receivers: [fluentforward]
      processors: [resourcedetection, attributes/loki, batch]
      exporters: [loki, file]
